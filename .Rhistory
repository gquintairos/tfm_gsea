var.test(paisesRicos$Life.Ladder, paisesPobres$Life.Ladder)
##Comprobacion de la homocedasticidad
fligner.test(x = list(paisesRicos,paisesPobres))
##Comprobacion de la homocedasticidad
fligner.test(x = list(paisesRicos$Life.Ladder,paisesPobres$Life.Ladder))
##Comprobacion de la homocedasticidad
fligner.test(x = list(paisesRicos$Life.Ladder,paisesPobres$Life.Ladder))
fligner.test(x = list(paisesEVAlta$Life.Ladder,paisesEVBaja$Life.Ladder))
?wilcox.test
###Pruebas estadísticas
##Contraste de hipotesis entre rentas altas y bajas para ver si siguen la misma distribución
wilcox.test(paisesRicos$Life.Ladder, paisesPobres$Life.Ladder)
?step
##regresión lineal para predecir el nivel de felicidad
modelo1 <- lm(Life.Ladder ~ . - Year - Country.Name, data = data)
##regresión lineal para predecir el nivel de felicidad
modelo1 <- lm(Life.Ladder ~ . - Year - Country.name, data = data)
summary(modelo1)
step(modelo1)
##regresión lineal para predecir el nivel de felicidad
modelo1 <- lm(Life.Ladder ~ . - Year - Country.name - Standard.deviation.of.ladder.by.country.year - Standard.deviation.Mean.of.ladder.by.country.year - , data = data)
##regresión lineal para predecir el nivel de felicidad
modelo1 <- lm(Life.Ladder ~ . - Year - Country.name - Standard.deviation.of.ladder.by.country.year - Standard.deviation.Mean.of.ladder.by.country.year, data = data)
step(modelo1)
modeloOptimo <- lm(formula = Life.Ladder ~ Log.GDP.per.capita + Social.support + Healthy.life.expectancy.at.birth + Freedom.to.make.life.choices + Generosity + Perceptions.of.corruption + Positive.affect + Confidence.in.national.government, data = data)
paisInventadoFeliz <- data.frame(
Log.GDP.per.capita = 13,
Social.support = 0.99,
Healthy.life.expectancy.at.birth = 100,
Freedom.to.make.life.choices = 0.99,
Generosity = 0.8,
Perceptions.of.corruption = 0.01,
Positive.affect = 0.99,
Confidence.in.national.government = 0.95
)
paisInventadoInfeliz <- data.frame(
Log.GDP.per.capita = 2.5,
Social.support = 0.05,
Healthy.life.expectancy.at.birth = 38,
Freedom.to.make.life.choices = 0.1,
Generosity = 0.01,
Perceptions.of.corruption = 0.95,
Positive.affect = 0.04,
Confidence.in.national.government = 0.05
)
predict(modeloOptimo, paisInventadoFeliz)
predict(modeloOptimo, paisInventadoInfeliz)
###analisis de correlaciones
matrizCorrelaciones <- matrix(nc = 2, nr = 0)
for (i in 1:(ncol(data) - 1)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],data[,length(data)],method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
matrizCorrelaciones <- rbind(matrizCorrelaciones, pair)
rownames(matrizCorrelaciones)[nrow(matrizCorrelaciones)] <- colnames(data)[i]
}
}
warnings()
print(matrizCorrelaciones)
colnames(corr_matrix) <- c("coeficiente", "p-valor")
print(matrizCorrelaciones)
matrizCorrelaciones <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("coeficiente", "p-valor")
# Coeficiente de correlacion de las variables independientes con respecto a la felicidad
for (i in 1:(ncol(data) - 1)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],data[,length(data)],method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
matrizCorrelaciones <- rbind(matrizCorrelaciones, pair)
rownames(matrizCorrelaciones)[nrow(matrizCorrelaciones)] <- colnames(data)[i]
}
}
print(matrizCorrelaciones)
colnames(matrizCorrelaciones) <- c("coeficiente", "p-valor")
print(matrizCorrelaciones)
matrizCorrelaciones <- matrix(nc = 2, nr = 0)
colnames(matrizCorrelaciones) <- c("coeficiente", "p-valor")
# Coeficiente de correlacion de las variables independientes con respecto a la felicidad
for (i in 3:(ncol(data))) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],data[,length(data)],method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
matrizCorrelaciones <- rbind(matrizCorrelaciones, pair)
rownames(matrizCorrelaciones)[nrow(matrizCorrelaciones)] <- colnames(data)[i]
}
}
print(matrizCorrelaciones)
###analisis de correlaciones
matrizCorrelaciones <- matrix(nc = 2, nr = 0)
colnames(matrizCorrelaciones) <- c("coeficiente", "p-valor")
# Coeficiente de correlacion de las variables independientes con respecto a la felicidad
for (i in 4:(ncol(data))) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],data[,length(data)],method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
matrizCorrelaciones <- rbind(matrizCorrelaciones, pair)
rownames(matrizCorrelaciones)[nrow(matrizCorrelaciones)] <- colnames(data)[i]
}
}
print(matrizCorrelaciones)
matrizCorrelaciones <- matrix(nc = 2, nr = 0)
colnames(matrizCorrelaciones) <- c("coeficiente", "p-valor")
# Coeficiente de correlacion de las variables independientes con respecto a la felicidad
for (i in 4:(ncol(data)-2)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],data[,length(data)],method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
matrizCorrelaciones <- rbind(matrizCorrelaciones, pair)
rownames(matrizCorrelaciones)[nrow(matrizCorrelaciones)] <- colnames(data)[i]
}
}
print(matrizCorrelaciones)
###analisis de correlaciones
matrizCorrelaciones <- matrix(nc = 2, nr = 0)
colnames(matrizCorrelaciones) <- c("coeficiente", "p-valor")
# Coeficiente de correlacion de las variables independientes con respecto a la felicidad
for (i in 4:(ncol(data)-2)) {
if (is.integer(data[,i]) | is.numeric(data[,i])) {
spearman_test = cor.test(data[,i],data$Life.Ladder,method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
matrizCorrelaciones <- rbind(matrizCorrelaciones, pair)
rownames(matrizCorrelaciones)[nrow(matrizCorrelaciones)] <- colnames(data)[i]
}
}
print(matrizCorrelaciones)
?write.xlsx
#Generacion nuevo dataset
write.xlsx("C:/Users/user/Documents/Máster Big Data/Tipología y ciclo de vida de los datos/Prácticas/Práctica2/data/WorldHappinessReport_trasLimpieza.xls", data, row.names = FALSE)
#Generacion nuevo dataset
write.xlsx(data, "C:/Users/user/Documents/Máster Big Data/Tipología y ciclo de vida de los datos/Prácticas/Práctica2/data/WorldHappinessReport_trasLimpieza.xls", row.names = FALSE)
##gráficas y tablas
boxplot(paisesPobres$Life.Ladder)
##gráficas y tablas
boxplot(paisesPobres$Life.Ladder, paisesRicos$Life.Ladder)
?boxplot
##gráficas y tablas
boxplot(paisesPobres$Life.Ladder, paisesRicos$Life.Ladder, names = c("Países pobres", "Países ricos"))
##gráficas y tablas
boxplot(paisesPobres$Life.Ladder, paisesRicos$Life.Ladder, names = c("Países pobres", "Países ricos"), ylab="Nivel de felicidad")
boxplot(paisesEVBaja$Life.Ladder, paisesEVAlta$Life.Ladder, names = c("Países con esperanza de vida baja", "Países con esperanza de vida alta"), ylab="Nivel de felicidad")
hist(data$Life.Ladder[data$Year="2018"])
hist(data$Life.Ladder[data$Year=="2018"])
?hist
setwd("C:/Users/user/Documents/Máster Big Data/Trabajo Fin de Máster/Proyecto")
load("C:/Users/user/Documents/Máster Big Data/Trabajo Fin de Máster/Proyecto/.RData")
#preparacion para random forest
ddr_gseaResult_pos$COMUN <- 0
for (row in 1:nrow(ddr_gseaResult_pos)) {
if(ddr_gseaResult_pos[row]$NAME %in% cmama_gseaResult_pos$NAME &&
ddr_gseaResult_pos[row]$NAME %in% mcl_gseaResult_pos$NAME){
ddr_gseaResult_pos[row]$COMUN <- 1
}
}
ddr_gseaResult_pos <- column_to_rownames(ddr_gseaResult_pos, "NAME")
names(ddr_gseaResult_pos) <- c("ES", "NES", "p", "FDR", "COMUN")
ddr_gseaResult_pos$COMUN <- as.factor(ddr_gseaResult_pos$COMUN)
library(data.table)
library(dplyr)
library(caTools)
library(randomForest)
#carga de los resultados de GSEA
ddr_gseaResult_neg <- fread("data/CCND1_neg_DDR.xls")
ddr_gseaResult_neg <- ddr_gseaResult_neg[,-c(2,3,4,9,10,11,12)]
ddr_gseaResult_pos <- fread("data/CCND1_pos_DDR.xls")
ddr_gseaResult_pos <- ddr_gseaResult_pos[,-c(2,3,4,9,10,11,12)]
mcl_gseaResult_neg <- fread("data/CCND1_neg_MCL.xls")
mcl_gseaResult_neg <- mcl_gseaResult_neg[,-c(2,3,4,9,10,11,12)]
mcl_gseaResult_pos <- fread("data/CCND1_pos_MCL.xls")
mcl_gseaResult_pos <- mcl_gseaResult_pos[,-c(2,3,4,9,10,11,12)]
cmama_gseaResult_neg <- fread("data/CCND1_neg_CancerDeMama.xls")
cmama_gseaResult_neg <- cmama_gseaResult_neg[,-c(2,3,4,9,10,11,12)]
cmama_gseaResult_pos <- fread("data/CCND1_pos_CancerDeMama.xls")
cmama_gseaResult_pos <- cmama_gseaResult_pos[,-c(2,3,4,9,10,11,12)]
#selección del top 500 de NES
ddr_neg_top500NES <- top_n(ddr_gseaResult_neg, 1000, "NES")[1:1000,]
cmama_neg_top500NES <- top_n(cmama_gseaResult_neg, 1000, "NES")[1:1000,]
mcl_neg_top500NES <- top_n(mcl_gseaResult_neg, 1000, "NES")[1:1000,]
ddr_pos_top500NES <- top_n(ddr_gseaResult_pos, 1000, "NES")[1:1000,]
cmama_pos_top500NES <- top_n(cmama_gseaResult_pos, 1000, "NES")[1:1000,]
mcl_pos_top500NES <- top_n(mcl_gseaResult_pos, 1000, "NES")[1:1000,]
#preparación de ficheros para detectar elementos comunes
fwrite(list(ddr_neg_top500NES$NAME), file="ddr_neg.txt")
fwrite(list(cmama_neg_top500NES$NAME), file="cmama_neg.txt")
fwrite(list(mcl_neg_top500NES$NAME), file="mcl_neg.txt")
fwrite(list(ddr_pos_top500NES$NAME), file="ddr_pos.txt")
fwrite(list(cmama_pos_top500NES$NAME), file="cmama_pos.txt")
fwrite(list(mcl_pos_top500NES$NAME), file="mcl_pos.txt")
#preparacion para random forest
ddr_gseaResult_pos$COMUN <- 0
for (row in 1:nrow(ddr_gseaResult_pos)) {
if(ddr_gseaResult_pos[row]$NAME %in% cmama_gseaResult_pos$NAME &&
ddr_gseaResult_pos[row]$NAME %in% mcl_gseaResult_pos$NAME){
ddr_gseaResult_pos[row]$COMUN <- 1
}
}
ddr_gseaResult_pos <- column_to_rownames(ddr_gseaResult_pos, "NAME")
names(ddr_gseaResult_pos) <- c("ES", "NES", "p", "FDR", "COMUN")
ddr_gseaResult_pos$COMUN <- as.factor(ddr_gseaResult_pos$COMUN)
ddr_gseaResult_neg$COMUN <- 0
for (row in 1:nrow(ddr_gseaResult_neg)) {
if(ddr_gseaResult_neg[row]$NAME %in% cmama_gseaResult_neg$NAME &&
ddr_gseaResult_neg[row]$NAME %in% mcl_gseaResult_neg$NAME){
ddr_gseaResult_neg[row]$COMUN <- 1
}
}
ddr_gseaResult_neg <- column_to_rownames(ddr_gseaResult_neg, "NAME")
names(ddr_gseaResult_neg) <- c("ES", "NES", "p", "FDR", "COMUN")
ddr_gseaResult_neg$COMUN <- as.factor(ddr_gseaResult_neg$COMUN)
#aplicación de la técnica
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos)
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg)
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
#validación
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos)
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg)
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
ddr_gseaResult_neg <- column_to_rownames(ddr_gseaResult_neg, "NAME")
install.packages("textshape")
library(data.table)
library(dplyr)
library(caTools)
library(randomForest)
library(textshape)
#carga de los resultados de GSEA
ddr_gseaResult_neg <- fread("data/CCND1_neg_DDR.xls")
ddr_gseaResult_neg <- ddr_gseaResult_neg[,-c(2,3,4,9,10,11,12)]
ddr_gseaResult_pos <- fread("data/CCND1_pos_DDR.xls")
ddr_gseaResult_pos <- ddr_gseaResult_pos[,-c(2,3,4,9,10,11,12)]
mcl_gseaResult_neg <- fread("data/CCND1_neg_MCL.xls")
mcl_gseaResult_neg <- mcl_gseaResult_neg[,-c(2,3,4,9,10,11,12)]
mcl_gseaResult_pos <- fread("data/CCND1_pos_MCL.xls")
mcl_gseaResult_pos <- mcl_gseaResult_pos[,-c(2,3,4,9,10,11,12)]
cmama_gseaResult_neg <- fread("data/CCND1_neg_CancerDeMama.xls")
cmama_gseaResult_neg <- cmama_gseaResult_neg[,-c(2,3,4,9,10,11,12)]
cmama_gseaResult_pos <- fread("data/CCND1_pos_CancerDeMama.xls")
cmama_gseaResult_pos <- cmama_gseaResult_pos[,-c(2,3,4,9,10,11,12)]
#selección del top 500 de NES
ddr_neg_top500NES <- top_n(ddr_gseaResult_neg, 1000, "NES")[1:1000,]
cmama_neg_top500NES <- top_n(cmama_gseaResult_neg, 1000, "NES")[1:1000,]
mcl_neg_top500NES <- top_n(mcl_gseaResult_neg, 1000, "NES")[1:1000,]
ddr_pos_top500NES <- top_n(ddr_gseaResult_pos, 1000, "NES")[1:1000,]
cmama_pos_top500NES <- top_n(cmama_gseaResult_pos, 1000, "NES")[1:1000,]
mcl_pos_top500NES <- top_n(mcl_gseaResult_pos, 1000, "NES")[1:1000,]
#preparación de ficheros para detectar elementos comunes
fwrite(list(ddr_neg_top500NES$NAME), file="ddr_neg.txt")
fwrite(list(cmama_neg_top500NES$NAME), file="cmama_neg.txt")
fwrite(list(mcl_neg_top500NES$NAME), file="mcl_neg.txt")
fwrite(list(ddr_pos_top500NES$NAME), file="ddr_pos.txt")
fwrite(list(cmama_pos_top500NES$NAME), file="cmama_pos.txt")
fwrite(list(mcl_pos_top500NES$NAME), file="mcl_pos.txt")
#preparacion para random forest
ddr_gseaResult_pos$COMUN <- 0
for (row in 1:nrow(ddr_gseaResult_pos)) {
if(ddr_gseaResult_pos[row]$NAME %in% cmama_gseaResult_pos$NAME &&
ddr_gseaResult_pos[row]$NAME %in% mcl_gseaResult_pos$NAME){
ddr_gseaResult_pos[row]$COMUN <- 1
}
}
ddr_gseaResult_pos <- column_to_rownames(ddr_gseaResult_pos, "NAME")
names(ddr_gseaResult_pos) <- c("ES", "NES", "p", "FDR", "COMUN")
ddr_gseaResult_pos$COMUN <- as.factor(ddr_gseaResult_pos$COMUN)
ddr_gseaResult_neg$COMUN <- 0
for (row in 1:nrow(ddr_gseaResult_neg)) {
if(ddr_gseaResult_neg[row]$NAME %in% cmama_gseaResult_neg$NAME &&
ddr_gseaResult_neg[row]$NAME %in% mcl_gseaResult_neg$NAME){
ddr_gseaResult_neg[row]$COMUN <- 1
}
}
ddr_gseaResult_neg <- column_to_rownames(ddr_gseaResult_neg, "NAME")
names(ddr_gseaResult_neg) <- c("ES", "NES", "p", "FDR", "COMUN")
ddr_gseaResult_neg$COMUN <- as.factor(ddr_gseaResult_neg$COMUN)
#aplicación de la técnica
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos)
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg)
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
#validación
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos)
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg)
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
?randomForest
str(ddr_gseaResult_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = COMUN)
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = COMUN)
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = COMUN, sampsize=1)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = COMUN, sampsize=c(1,1))
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(1,1))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(10,10))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(100,100))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
#estratificación del muestreo
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos, strata = ddr_gseaResult_pos$COMUN, sampsize=c(10,10))
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(10,10))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(10,10))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos, strata = ddr_gseaResult_pos$COMUN, sampsize=c(10,10))
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
View(ddr_gseaResult_pos)
#estratificación del muestreo
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos, strata = ddr_gseaResult_pos$COMUN, sampsize=c(75,25))
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(75,25))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
#estratificación del muestreo
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos, strata = ddr_gseaResult_pos$COMUN, sampsize=c(25,75))
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(25,75))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c(25,75))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
install.packages("StratifiedRF")
library(StratifiedRF)
?stratified_rf
stratified_rf(ddr_gseaResult_pos, "COMUN", mtry = mtry_pos, ntrees = 1000,
multicore = TRUE)
#validación
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
groups <- list(c("ES", "NES"),c("p", "FDR"))
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
stratified_rf(ddr_gseaResult_pos, "COMUN", groups=groups, mtry = mtry_pos, ntrees = 1000,
multicore = TRUE)
stratified_rf(ddr_gseaResult_pos, "COMUN", groups=groups, mtry = c(mtry_pos,mtry_pos), ntrees = 1000,
multicore = TRUE)
stratified_rf(ddr_gseaResult_neg, "COMUN", groups=groups, mtry = c(mtry_neg,mtry_neg), ntrees = 1000,
multicore = TRUE)
#estratificación del muestreo
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos, strata = ddr_gseaResult_pos$COMUN, sampsize=c(25,75))
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
rf_pos
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c('0'=6000, '1'=2000))
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c('0'=60, '1'=20))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c('0'=25, '1'=75))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, sampsize=c('0'=25, '1'=75))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
#estratificación del muestreo
mtry_pos <- tuneRF(ddr_gseaResult_pos[,-5], ddr_gseaResult_pos$COMUN)
sample_pos = sample.split(ddr_gseaResult_pos$COMUN, SplitRatio = .75)
train_pos = subset(ddr_gseaResult_pos, sample_pos == TRUE)
test_pos  = subset(ddr_gseaResult_pos, sample_pos == FALSE)
rf_pos <- randomForest(COMUN ~ ., data=train_pos, mtry=mtry_pos, strata = ddr_gseaResult_pos$COMUN, sampsize=c('0'=25, '1'=75))
predicciones_pos <- predict(rf_pos, test_pos)
(mc_pos <- with(test_pos,table(predicciones_pos, COMUN)))
100 * sum(diag(mc_pos)) / sum(mc_pos)
mtry_neg <- tuneRF(ddr_gseaResult_neg[,-5], ddr_gseaResult_neg$COMUN)
sample_neg = sample.split(ddr_gseaResult_neg$COMUN, SplitRatio = .75)
train_neg = subset(ddr_gseaResult_neg, sample_neg == TRUE)
test_neg  = subset(ddr_gseaResult_neg, sample_neg == FALSE)
rf_neg <- randomForest(COMUN ~ ., data=train_neg, mtry=mtry_neg, strata = ddr_gseaResult_neg$COMUN, sampsize=c('0'=25, '1'=75))
predicciones_neg <- predict(rf_neg, test_neg)
(mc_neg <- with(test_neg,table(predicciones_neg, COMUN)))
100 * sum(diag(mc_neg)) / sum(mc_neg)
